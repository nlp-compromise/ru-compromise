import test from 'tape'
import nlp from './_lib.js'
let here = '[root-match] '
nlp.verbose(false)

test('root-match:', function (t) {
  let arr = [
    // verb toRoots
    ["побриться", "{побриться}"],//same
    ["побреюсь", "{побриться}"],
    ["побреешься", "{побриться}"],
    ["побреется", "{побриться}"],
    ["побреемся", "{побриться}"],
    ["побреетесь", "{побриться}"],
    ["побреются", "{побриться}"],

    ["выучиваю", "{выучивать}"],
    ["выучиваешь", "{выучивать}"],
    ["выучивает", "{выучивать}"],
    ["выучиваем", "{выучивать}"],
    ["выучиваете", "{выучивать}"],
    ["выучивают", "{выучивать}"],

    ["выучу", "{выучить}"],
    ["выучишь", "{выучить}"],
    ["выучит", "{выучить}"],
    ["выучим", "{выучить}"],
    ["выучите", "{выучить}"],
    ["выучат", "{выучить}"],

    // he runs
    ['я	бегу́', '#Pronoun {бежать}'],
    ['ты бежи́шь', '#Pronoun {бежать}'],
    ['она	бежи́т', '#Pronoun {бежать}'],
    ['мы бежи́м', '#Pronoun {бежать}'],
    ['вы	бежи́те', '#Pronoun {бежать}'],
    ['они	бегу', '#Pronoun {бежать}'],
    ['он бежит в школу', '#Pronoun {бежать} в #Noun']

  ]
  arr.forEach(function (a) {
    let [str, match] = a
    let doc = nlp(str).compute('root')
    let tags = doc.json()[0].terms.map(term => term.tags[0])
    let msg = `'${(str + "' ").padEnd(20, ' ')}  - '${tags.join(', ')}'`
    t.equal(doc.has(match), true, here + msg)
  })
  t.end()
})
